Q1.
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
public class BallMover extends JPanel implements Runnable, ActionListener {
private static final int PANEL_WIDTH = 500;
private static final int PANEL_HEIGHT = 500;
private static final int BALL_SIZE = 30;
private static final int DELAY = 50; 
private int ballX;
private int ballY;
private int direction = 1; 
private Thread thread;
private JButton startButton;
private boolean isRunning = false;
public BallMover() {
setPreferredSize(new java.awt.Dimension(PANEL_WIDTH, PANEL_HEIGHT));
setBackground(Color.WHITE);
startButton = new JButton("Start");
startButton.addActionListener(this);
add(startButton);
addMouseListener(new MouseAdapter() {
public void mouseClicked(MouseEvent e) {
if (isRunning) {
stopThread();
}
}
});
}
public void startThread() {
if (thread == null) {
thread = new Thread(this);
isRunning = true;
thread.start();
}
}
public void stopThread() {
if (thread != null) {
isRunning = false;
thread = null;
}
}
public void run() {
while (isRunning) {
ballY += direction;
if (ballY <= 0 || ballY + BALL_SIZE >= PANEL_HEIGHT) {
direction *= -1; 
}
repaint();
try {
Thread.sleep(DELAY);
} catch (InterruptedException ex) {}
}
}
public void actionPerformed(ActionEvent e) {
if (e.getSource() == startButton) {
startThread();
}
}
public void paintComponent(Graphics g) {
super.paintComponent(g);
g.setColor(Color.RED);
g.fillOval(ballX, ballY, BALL_SIZE, BALL_SIZE);
}
public static void main(String[] args) {
JFrame frame = new JFrame("Ball Mover");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.getContentPane().add(new BallMover());
frame.pack();
frame.setVisible(true);
}
}

Q2.
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Main {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");

        MessageBean messageBean = (MessageBean) context.getBean("messageBean");

        System.out.println(messageBean.getMessage());
    }
}

public class MessageBean {
    private String message;

    public void setMessage(String message) {
        this.message = message;
    }

    public String getMessage() {
        return message;
    }
}

<!-- applicationContext.xml -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <bean id="messageBean" class="MessageBean">
        <property name="message" value="If you can't explain it simply, you don't understand it well enough" />
    </bean>

</beans>

